TO DO:

IMPORTANT: Read the ENTIRE protocol description paper and get a good understanding of how the DFA and Protocol Commands work.

1. Create a class that handles the establishment of a connection to the server, and spawns 3 threads - one for each connection (control, admin and data). A user will start with only two connections, and a third one will be opened once a user becomes an admin. 
2. Create a class that receives protocol commands, parses them, and calls the functions associated with these commands. Think carefully about how you will define the structure of this class, and how you willl represent the server and client commands, because we will need to access them frequently. I will suggest that you start with an example - 3 server commands, and 3 client commands - and if this structure works, then add more. 
3. Create a class that receives commands over the control channel, parses them and sends information over the data channel. Once this is working, do the same for the admin channel. 

Open Questions:

1. How are we going to organize the groups? - public and private
2. How are we going to establish the authentication of a user trying to connect to a group?
3. How are we going to have multiple chatrooms with a command line interface?
4. How do we broadcast a message to all the clients connected to the server?

5. allow same user to login multiple times at the same time? - Jeshur

5.29.2017
States of the DFA:

- Specify which states are client or server states

1. Idle:
- Server is running but no users are connected

2. User Authenticated: Jeshur
- A file on the system maintains a key-value list of users who have been added to the system
- Server checks against that file to determine which users have been authenticated

3. User is waiting for a response from the server:
- User sends request to join a private chat
- Then user waits for chat admin to respond 

4. User joins a chat: Shivam
- User can see a list of options that they will be able to choose from
- User should be able to create a group chat 

5. User is elevated to admin status:
- Current chat admin elevates a user to admin status

To do if we have time:
1. Get separate channels set up on the client and server - one for control, one for data and one for admin
2. Enryption
3. Use a database to store client info instead of a file

Ask Sergey:
1. Is our implementation of the DFA enough?
2. We are using TCP/IP for socket connections (explain line in paper specification)
3. Explain extra credit - client should be able to find the server running anywhere on the network, without being given the IP address of the network
4. Is using asynchat fine? Yes

6.6.2017

Outstanding tasks:
1. Unable to ban a user from a group when running a distributed server - MM
2. When I ban a user from a group, and I try to join another group, the options show up twice - JP
3. Check version number with each request - JP
4. If one user logs out, everybody gets logged out and the server shuts down. Fix this! - MM
5. When a user logs out, they should be removed from the client map as well - MM
6. Create video of protocol in action - SS
7. Update RFC of our protocol - WG
8. Comment all the files - MM, JP
9. Write a thorough explaination of how our protocol is implemented - MM, JP
