TO DO:

6.8.2017

Meghna:
1. Make template for beginning of file comments for Jeshur
2. A document describing which files satisfy each of the specified requirements. This
document should be titled Requirements_Team_<x>.<ext>
-- With your submission, include a file that
details what files, classes, etc. satisfy each Protocol Requirement. Within each
file, you must identify the segments of code that satisfy the requirement. For
instance, the code that implements your DFA should begin with a comment
that says “STATEFUL”. In the document, you must also indicate whether or
not you implemented the extra credit and how. 
3. PDU's for document & mark where protocol requirements are implemented in code - NOW
4. Try the exta credit

Jeshur:
1. All (well-commented) source code. My basic rule is that all code should be commented in a
way that others can pick up the code and instantly understand it – write comments the way
you would want to see them if you picked up code and had to learn it (basically a lot of
comments – each block should have some level of comments). The top of each file should
contain the class name, date, group members, and purpose of the file. 
-- You are required to provide documentation describing how your project
satisfies the Protocol Requirements. You must label areas of your code which
address each of these requirements.

Shivam:
1. A README containing the following information 
- How to compile and run your programs (including any usercodes and passwords needed).
- An analysis about how robust your assignment is – do you think that it’s tough to crack
through fuzzing? Explain how you tested your implementation’s robustness 
** Black box and white box testing
** Testing from the perspective of the user
** Analysis of how the tests were structured - tested with multiple clients and ran through multiple scenarios
- Indicate if you implemented the extra credit. 
2. A video of your protocol in action! This should be between 3 and 5 minutes in length. If not
possible – then screen shots are acceptable, but not preferred. Please name the file
appropriately with your Team Name. This can be turned in before the last class (we will
be looking at the class protocols during the last class of the semester).

Ted:
1. An updated complete proposal document including any changes or updates we suggested and
a section describing any differences since the original submission (called out as the
differences in the second version of the document). The implementation must agree with the
protocol design. Also include any performance implications that you find during your coding
and testing. This document should be titled Updated_Design_Team_<X>.<ext>. 

@Everybody - Template for group member evaluation:
1. Did everybody do an equal amount of work? Why or why not? Write a sentence or two about each person.
2. Did everybody contribute equally to the code?
3. How easy was each person to work with?
4. How was your overall experience working with the team?

----------------------------------------------------------

IMPORTANT: Read the ENTIRE protocol description paper and get a good understanding of how the DFA and Protocol Commands work.

1. Create a class that handles the establishment of a connection to the server, and spawns 3 threads - one for each connection (control, admin and data). A user will start with only two connections, and a third one will be opened once a user becomes an admin. 
2. Create a class that receives protocol commands, parses them, and calls the functions associated with these commands. Think carefully about how you will define the structure of this class, and how you willl represent the server and client commands, because we will need to access them frequently. I will suggest that you start with an example - 3 server commands, and 3 client commands - and if this structure works, then add more. 
3. Create a class that receives commands over the control channel, parses them and sends information over the data channel. Once this is working, do the same for the admin channel. 

Open Questions:

1. How are we going to organize the groups? - public and private
2. How are we going to establish the authentication of a user trying to connect to a group?
3. How are we going to have multiple chatrooms with a command line interface?
4. How do we broadcast a message to all the clients connected to the server?

5. allow same user to login multiple times at the same time? - Jeshur

----------------------------------------------------------

5.29.2017
States of the DFA:

- Specify which states are client or server states

1. Idle:
- Server is running but no users are connected

2. User Authenticated: Jeshur
- A file on the system maintains a key-value list of users who have been added to the system
- Server checks against that file to determine which users have been authenticated

3. User is waiting for a response from the server:
- User sends request to join a private chat
- Then user waits for chat admin to respond 

4. User joins a chat: Shivam
- User can see a list of options that they will be able to choose from
- User should be able to create a group chat 

5. User is elevated to admin status:
- Current chat admin elevates a user to admin status

To do if we have time:
1. Get separate channels set up on the client and server - one for control, one for data and one for admin
2. Enryption
3. Use a database to store client info instead of a file

Ask Sergey:
1. Is our implementation of the DFA enough?
2. We are using TCP/IP for socket connections (explain line in paper specification)
3. Explain extra credit - client should be able to find the server running anywhere on the network, without being given the IP address of the network
4. Is using asynchat fine? Yes

--------------------------------------------------------

6.6.2017

Outstanding tasks:
1. Unable to ban a user from a group when running a distributed server - MM
2. When I ban a user from a group, and I try to join another group, the options show up twice - JP (done)
3. Check version number with each request - JP (done)
4. If one user logs out, everybody gets logged out and the server shuts down. Fix this! - MM
5. When a user logs out, they should be removed from the client map as well - MM
6. Create video of protocol in action - SS
7. Update RFC of our protocol - WG
8. Comment all the files AND include clearly how we implemented states of the DFA - JP
9. Write a thorough explaination of how our protocol is implemented - MM
10. Send an email to Mike and Sergey - evaluate your group members' work -- EVERYBODY (Lecture 8 - slide 3)

